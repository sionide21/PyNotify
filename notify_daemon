#! /usr/bin/env python

# Copyright (c) 2010 Ben Olive
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

## Config
# Path to the notification icon to use in the sys tray.
notificationIcon='./icon.png'
# Set to true if you want to use RPC for client server comm, 
# set to false for unix sockets for comm. More information in the readme
rpc=False
# Port to listen on for notifications
port=2199
# File to use for IPC if using Unix Domain Sockets
ipcFile='~/.pynotify.sock'

import pygtk
pygtk.require('2.0')
import gtk
import gobject
import xmlrpclib
from SimpleXMLRPCServer import SimpleXMLRPCServer
import socket
from threading import Thread
import os
import sys


ipcFile=os.path.expanduser(ipcFile)

gtk.gdk.threads_init()

class Notify:
    def hide(self, widget):
        self.msg = []
        self.tray.set_visible(False)

    def delete_event(self, widget, event, data=None):
        return False

    def destroy(self, widget, data=None):
        gtk.main_quit()

    def show_message(self, message):
        self.msg.append(message)
        self.tray.set_tooltip("\n".join(self.msg))
        self.tray.set_visible(True)
        
    def __init__(self):
        self.msg = []
        self.tray = gtk.StatusIcon()
        self.tray.set_visible(False)
        self.tray.set_blinking(True)
        self.tray.set_from_file(notificationIcon)
        self.tray.connect("activate", self.hide)

    def main(self):
        gtk.main()

class Server(Thread):
    def __init__(self, notify):
        Thread.__init__(self)
        self.setDaemon(True)
        self.notifier = notify

    def show(self, msg):
        gobject.idle_add(self.notifier.show_message, msg)
        return "ok"

class RPC(Server):
    def __init__(self, notify):
        Server.__init__(self, notify)

    def run(self):
        self.server = SimpleXMLRPCServer(("localhost", port))
        self.server.register_function(self.show, "show")
        self.server.serve_forever()


class UDS(Server):
    def __init__(self, notify):
        Server.__init__(self, notify)

    def run(self):
        self.server = socket.socket(socket.AF_UNIX,socket.SOCK_DGRAM)
        self.server.bind(ipcFile)
        while True:
            (cmd, _) = self.server.recvfrom(0x10000)
            if len(cmd) > 0:
                if cmd[0] == 'S':
                    self.show(cmd[1:])

if __name__ == "__main__":

    # Run this as a daemon
    if os.fork(): exit(0)
    os.setsid()
    
    sys.stdin.close()
    sys.stderr.close()
    sys.stdout.close()

    try:
        n = Notify()
        if rpc:
            r = RPC(n)
        else:
            r = UDS(n)
        r.start()
        n.main()
    finally:
        os.unlink(ipcFile)
